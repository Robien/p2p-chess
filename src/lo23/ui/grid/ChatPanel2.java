/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package lo23.ui.grid;

import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import lo23.data.ApplicationModel;
import lo23.data.Message;
import lo23.data.Move;
import lo23.data.Player;
//import lo23.ui.grid.EventListener;

/** 
 *
 * @author PEP
 */
public class ChatPanel2 extends javax.swing.JPanel {

    StyleContext sc;
    Style defaultStyle;
    final Style localStyle;
    final Style remoteStyle;
    final Style gameStyle;
    final DefaultStyledDocument doc;
    ApplicationModel myModel;

//       private EventListener eventListener;

    /**
     * Creates new form ChatPanel2
     */

        public ChatPanel2(ApplicationModel model) {
        myModel = model;

//        eventListener = new EventListener(this, myModel);

        initComponents();
        sc = new StyleContext();
        doc = new DefaultStyledDocument(sc);
        // style pour le joueur local
        defaultStyle = sc.getStyle(StyleContext.DEFAULT_STYLE);
        localStyle = sc.addStyle("localStyle", defaultStyle);
        StyleConstants.setLeftIndent(localStyle, 16);
        StyleConstants.setRightIndent(localStyle, 16);
        StyleConstants.setFirstLineIndent(localStyle, 16);
        StyleConstants.setFontFamily(localStyle, "serif");
        StyleConstants.setFontSize(localStyle, 12);


        remoteStyle = jTextPane1.addStyle("remoteStyle", defaultStyle);
        StyleConstants.setFontFamily(remoteStyle, "serif");
        StyleConstants.setForeground(remoteStyle, Color.BLUE);
      
        gameStyle = jTextPane1.addStyle("gameStyle", remoteStyle);
        StyleConstants.setForeground(gameStyle, Color.RED);
        StyleConstants.setFontSize(gameStyle, 25);

                // ajout d'un ecouteur de frappe du clavier sur le textField
        jTextField1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                // teste si la touche pressé correspond à la touche entrée
                if (e.getKeyCode() == 10) {
                    try {
                        // sur le bouton lui meme
                        // sur le bouton lui meme
                        sendMsg(jTextField1.getText());
                    } catch (BadLocationException ex) {
                        Logger.getLogger(ChatPanel2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 51, 0));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Draw");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Give up");

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Save game");

        jTextPane1.setEditable(false);
        jTextPane1.setBackground(new java.awt.Color(255, 255, 204));
        jTextPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextPane1.setForeground(new java.awt.Color(102, 102, 102));
        jTextPane1.setToolTipText("");
        jTextPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextPane1.setMaximumSize(new java.awt.Dimension(6, 20));
        jScrollPane1.setViewportView(jTextPane1);

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Send");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(0, 87, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("test");
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * This function allows to display message that local player sent
     * @param msg
     * @throws BadLocationException
     */
    private void sendMsg(String msg) throws BadLocationException{
       if (!msg.equals("")) { // if not null
            StyledDocument doc2 = (StyledDocument) jTextPane1.getDocument();

                // sending message to remote player
                if(myModel == null)
                       System.out.print("variable modele nulle");
                else{

            
                 //   Message m = myModel.getGManager().createMessage(msg);
                //   myModel.getGManager().sendMessage(m);
                }

                // printing on screen
                doc2.insertString(doc2.getLength(), "[" + getHeure() + "][" + myModel.getGManager().getCurrentGame().getLocalPlayer().getPublicProfile().getPseudo()+ "] : " + jTextField1.getText() + "\n", localStyle);
                jTextField1.setText("");
                jTextField1.setFocusable(true);


               // receivedMsg(new Message("test", null, null));

        }
    }
    /**
     * Fonction qui permet d'afficher un message envoyé par le joueur distant
     * @param msg
     * @throws BadLocationException
     */
    public void receivedMsg(Message msg) throws BadLocationException{
       if (!msg.getContents().equals("")) { // if not null
            StyledDocument doc2 = (StyledDocument) jTextPane1.getDocument();

            Player sender = msg.getSender();
           // Player receiver = msg.getReceiver();

            // printing on screen
            doc2.insertString(doc2.getLength(), "[" + getHeure() + "]["+sender.getPublicProfile().getPseudo()+"] : " + msg.getContents() + "\n", remoteStyle);


       }
    }

    /**
     * Fonction qui permet d'afficher un message par rapport au jeu
     * @param msg
     * @throws BadLocationException
     */
    public void gameMsg(Move mv) throws BadLocationException{
            StyledDocument doc2 = (StyledDocument) jTextPane1.getDocument();

                // printing on screen
                doc2.insertString(doc2.getLength(), "[" + getHeure() + "] "+ mv.toString(), gameStyle);
              //  jTextField1.setText("");
               // jTextField1.setFocusable(true);
    }
    
    private String getHeure(){
        Date actuelle = new Date();
        DateFormat dateFormat = new SimpleDateFormat("HH:mm");
        return dateFormat.format(actuelle);
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String val = jTextField1.getText();
        try {
            sendMsg(val);
        } catch (BadLocationException ex) {
            Logger.getLogger(ChatPanel2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton4ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
